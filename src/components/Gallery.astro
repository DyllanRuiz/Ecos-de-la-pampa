---
import { Maximize2, ChevronLeft, ChevronRight, X } from "@lucide/astro";

const { personajes } = Astro.props;
const fotos = personajes.foto_url || [];

const placeholder = "/placeholder-image.png";
const initialImage = fotos.length > 0 ? fotos[0] : placeholder;
---

<section class="md:h-[652px] mx-auto">
  <h2
    class="text-center text-2xl font-semibold italic text-primary-600 mb-4"
    style="filter: drop-shadow(0px 2px 4px rgba(1, 138, 24, 1));"
    aria-label="Título de la galería"
  >
    Galería
  </h2>

  <!-- Imagen principal con botón -->
  <div class="relative flex items-center justify-center h-96 rounded-2xl overflow-hidden md:w-[500px] md:h-[570px]">
    <img
      id="main-image"
      src={initialImage}
      alt="Foto principal"
      class="object-cover h-[400px] w-[340px] transition duration-500 ease-in-out rounded-2xl md:w-[500px] md:h-[570px]"
    />

    <div class="absolute top-3 right-3 flex gap-2">
      <button
        id="open-modal-btn"
        class="p-2 bg-black/50 hover:bg-black/70 rounded-full text-white transition"
        title="Ver imagen en grande"
      >
        <Maximize2 class="w-5 h-5" />
      </button>
    </div>
  </div>

  <!-- Carrusel de miniaturas -->
  <div class="relative mt-4 w-full max-w-xs mx-auto flex justify-center items-center md:w-[500px]">
    {
      fotos.length > 3 && (
        <button
          id="left-arrow"
          aria-label="Mover izquierda"
          class="p-2 text-primary-300 hover:text-primary-800 disabled:text-gray-300"
        >
          &lt;
        </button>
      )
    }

    <div
      id="thumbnails-container"
      class="flex gap-2 overflow-x-auto px-2 touch-auto snap-x snap-mandatory scrollbar-hide"
      style="scroll-behavior: smooth;"
    >
      {
        (fotos.length > 0 ? fotos : [placeholder]).map(
          (foto: string, i: number) => (
            <img
              src={foto}
              alt={`Miniatura ${i + 1}`}
              draggable="false"
              loading="lazy"
              class="w-16 h-16 object-cover rounded cursor-pointer border-2 border-transparent transition"
              data-index={i}
              aria-selected={i === 0 ? "true" : "false"}
            />
          )
        )
      }
    </div>

    {
      fotos.length > 3 && (
        <button
          id="right-arrow"
          aria-label="Mover derecha"
          class="p-2 text-primary-300 hover:text-primary-800 disabled:text-gray-300"
        >
          &gt;
        </button>
      )
    }
  </div>
</section>

<!-- Modal de imagen -->
<div id="image-modal" class="fixed inset-0 bg-black/80 hidden items-center justify-center z-50">
  <button id="close-modal" class="absolute top-4 right-4 text-white p-2">
    <X class="w-6 h-6" />
  </button>

  <button id="prev-image" class="absolute left-4 text-white p-2">
    <ChevronLeft class="w-8 h-8" />
  </button>

  <img id="modal-image" src="" alt="Imagen en grande" class="max-w-full max-h-full object-contain rounded-lg shadow-lg" />

  <button id="next-image" class="absolute right-4 text-white p-2">
    <ChevronRight class="w-8 h-8" />
  </button>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const mainImage = document.getElementById("main-image");
    const thumbnailsContainer = document.getElementById("thumbnails-container");
    const thumbnails = Array.from(thumbnailsContainer.querySelectorAll("img[data-index]"));

    let selectedIndex = 0;

    function updateSelected(newIndex) {
      if (newIndex < 0 || newIndex >= thumbnails.length) return;
      selectedIndex = newIndex;
      const newSrc = thumbnails[newIndex].src;
      mainImage.src = newSrc;
      thumbnails.forEach((thumb, i) => {
        thumb.classList.toggle("border-primary-300", i === newIndex);
        thumb.classList.toggle("border-transparent", i !== newIndex);
      });
    }

    thumbnails.forEach((thumb, i) => {
      thumb.addEventListener("click", () => updateSelected(i));
    });

    // Modal
    const modal = document.getElementById("image-modal");
    const modalImage = document.getElementById("modal-image");
    const openModalBtn = document.getElementById("open-modal-btn");
    const closeModalBtn = document.getElementById("close-modal");
    const prevBtn = document.getElementById("prev-image");
    const nextBtn = document.getElementById("next-image");

    function openModal() {
      modal.classList.remove("hidden");
      modal.classList.add("flex");
      modalImage.src = thumbnails[selectedIndex].src;
    }

    function closeModal() {
      modal.classList.add("hidden");
      modal.classList.remove("flex");
    }

    function showPrevImage() {
      updateSelected((selectedIndex - 1 + thumbnails.length) % thumbnails.length);
      modalImage.src = thumbnails[selectedIndex].src;
    }

    function showNextImage() {
      updateSelected((selectedIndex + 1) % thumbnails.length);
      modalImage.src = thumbnails[selectedIndex].src;
    }

    openModalBtn.addEventListener("click", openModal);
    closeModalBtn.addEventListener("click", closeModal);
    prevBtn.addEventListener("click", showPrevImage);
    nextBtn.addEventListener("click", showNextImage);

    modal.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    updateSelected(0);
  });
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar { display: none; }
  .scrollbar-hide { -ms-overflow-style: none; scrollbar-width: none; }
</style>
