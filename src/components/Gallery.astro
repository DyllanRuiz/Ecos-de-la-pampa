---
import {  Maximize2 } from "@lucide/astro";

const { personajes } = Astro.props;
const fotos = personajes.foto_url || [];

const placeholder = "/placeholder-image.png";
const initialImage = fotos.length > 0 ? fotos[0] : placeholder;
---

<section class="md:h-[652px] mx-auto">
  <h2
    class="text-center text-2xl font-semibold italic text-primary-600 mb-4"
    style="filter: drop-shadow(0px 2px 4px rgba(1, 138, 24, 1));"
    aria-label="Título de la galería"
  >
    Galería
  </h2>

  <!-- Imagen principal con botones -->
  <div class="relative flex items-center justify-center h-96 rounded-2xl overflow-hidden md:w-[500px] md:h-[570px]">
    <img
      id="main-image"
      src={initialImage}
      alt="Foto principal"
      class="object-cover h-[400px] w-[340px] transition duration-500 ease-in-out rounded-2xl md:w-[500px] md:h-[570px]"
    />

    <!-- Controles flotantes -->
    <div class="absolute top-3 right-3 flex gap-2">

      <!-- Botón Pantalla Completa -->
      <button
        id="fullscreen-btn"
        class="p-2 bg-black/50 hover:bg-black/70 rounded-full text-white transition"
        title="Ver en pantalla completa"
      >
        <Maximize2 class="w-5 h-5" />
      </button>
    </div>
  </div>

  <!-- Carrusel miniaturas -->
  <div class="relative mt-4 w-full max-w-xs mx-auto flex justify-center items-center md:w-[500px]">
    {
      fotos.length > 3 && (
        <button
          id="left-arrow"
          aria-label="Mover izquierda"
          class="p-2 text-primary-300 hover:text-primary-800 disabled:text-gray-300"
        >
          &lt;
        </button>
      )
    }

    <div
      id="thumbnails-container"
      class="flex gap-2 overflow-x-auto px-2 touch-auto snap-x snap-mandatory scrollbar-hide"
      style="scroll-behavior: smooth;"
    >
      {
        (fotos.length > 0 ? fotos : [placeholder]).map(
          (foto: string, i: number) => (
            <img
              src={foto}
              alt={`Miniatura ${i + 1}`}
              draggable="false"
              loading="lazy"
              onload="this.classList.remove('skeleton')"
              class:list={["skeleton"]}
              data-index={i}
              class="w-16 h-16 object-cover rounded cursor-pointer border-2 border-transparent transition"
              aria-selected={i === 0 ? "true" : "false"}
            />
          )
        )
      }
    </div>

    {
      fotos.length > 3 && (
        <button
          id="right-arrow"
          aria-label="Mover derecha"
          class="p-2 text-primary-300 hover:text-primary-800 disabled:text-gray-300"
        >
          &gt;
        </button>
      )
    }
  </div>
</section>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const mainImage = document.getElementById("main-image");
    const thumbnailsContainer = document.getElementById("thumbnails-container");
    const thumbnails = Array.from(thumbnailsContainer.querySelectorAll("img[data-index]"));
    const fullscreenBtn = document.getElementById("fullscreen-btn");

    let selectedIndex = 0;

    function updateSelected(newIndex) {
      if (newIndex < 0 || newIndex >= thumbnails.length) return;
      const newSrc = thumbnails[newIndex].src;
      mainImage.src = newSrc;
 

      thumbnails.forEach((thumb, i) => {
        if (i === newIndex) {
          thumb.classList.add("border-primary-300");
          thumb.classList.remove("border-transparent");
          thumb.setAttribute("aria-selected", "true");
          selectedIndex = newIndex;

          const containerRect = thumbnailsContainer.getBoundingClientRect();
          const thumbRect = thumb.getBoundingClientRect();
          const scrollLeft = thumbnailsContainer.scrollLeft;
          const offset = thumbRect.left - containerRect.left;

          thumbnailsContainer.scrollTo({
            left: scrollLeft + offset - thumbnailsContainer.clientWidth / 2 + thumb.offsetWidth / 2,
            behavior: "smooth",
          });
        } else {
          thumb.classList.remove("border-primary-300");
          thumb.classList.add("border-transparent");
          thumb.setAttribute("aria-selected", "false");
        }
      });
    }

    updateSelected(0);

    thumbnails.forEach((thumb, i) => {
      thumb.addEventListener("click", () => updateSelected(i));
    });

    fullscreenBtn.addEventListener("click", () => {
      if (mainImage.requestFullscreen) {
        mainImage.requestFullscreen();
      } else if (mainImage.webkitRequestFullscreen) {
        mainImage.webkitRequestFullscreen();
      }
    });

    const leftArrow = document.getElementById("left-arrow");
    const rightArrow = document.getElementById("right-arrow");

    if (leftArrow && rightArrow) {
      const scrollAmount = 60;
      leftArrow.addEventListener("click", () => {
        thumbnailsContainer.scrollBy({ left: -scrollAmount, behavior: "smooth" });
      });
      rightArrow.addEventListener("click", () => {
        thumbnailsContainer.scrollBy({ left: scrollAmount, behavior: "smooth" });
      });
    }
  });
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .skeleton {
    @apply bg-gray-300 animate-pulse rounded-lg;
  }

#main-image:fullscreen,
#main-image:-webkit-full-screen {
  width: 100vw !important;
  height: 100vh !important;
  max-width: 100vw !important;
  max-height: 100vh !important;
  object-fit: contain !important;
  background-color: black;
}

@media (max-width: 640px) {
  #main-image:fullscreen,
  #main-image:-webkit-full-screen {
    width: 100vw !important;
    height: 100vh !important;
  }
}


</style>
